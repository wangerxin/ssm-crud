<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:component-scan base-package="com.atguigu">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- Spring的配置文件，主要用于装配bean，这里主要配置和业务逻辑有关的 -->

	<!--dao层：装配数据源（）-->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!--<property name="password" value="${jdbc.password}"></property>-->
	</bean>

	<!--                         dao层：装配mybatis                             -->
	<!-- 装配SqlSessionFactoryBean（在dao层被使用） -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<!-- 指定DataSource -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	<!-- 装配mapper扫描器（扫描器会扫描mybatis接口，底层会创建实现类加入IOC容器，不需要程序员使用） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描com.atguigu.crud.dao下的接口 -->
		<property name="basePackage" value="com.atguigu.crud.dao"></property>
	</bean>
	<!-- 配置可以执行批量的sqlSession，建立一次连接，可以执行多次sql（在dao层被使用） -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>

	<!--                             service层：配置事物                      -->
	<!-- service层：装配事务管理器（在事物增强中被引用） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源-->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	<!-- 设置aop，aop有很多种，当前aop是事物  -->
	<aop:config>
		<!-- 切入点表达式（设置事务的作用范围，） -->
		<aop:pointcut id="txPoint" expression="execution(* com.atguigu.crud.service..*(..))" />
		<!-- 配置事务增强（设置事物的规则） -->
		<aop:advisor pointcut-ref="txPoint" advice-ref="txAdvice" />
	</aop:config>
	<!--配置事务增强（设置事物规则，在aop配置中被引用）-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!--以get开始的所有方法，事物规则是read-only  -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- controller层：配置在springmvc配置文件里面 -->
	
</beans>
